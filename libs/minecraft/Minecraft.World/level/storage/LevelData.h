#pragma once

#include <string>
#include <vector>
#include "Minecraft.Core/Vec3i.h"

class CompoundTag;
class BlockPos;
class Player;
class GameType;
class LevelType;
class SuperflatConfig;
class Difficulty;
class DimensionType;
class LevelSettings;

class LevelData {
public:
    LevelData();
    LevelData(CompoundTag*);
    LevelData(LevelSettings*, std::wstring const&);
    LevelData(LevelData*);
    virtual ~LevelData();
    virtual void createTag();
    virtual void createTag(std::vector<std::shared_ptr<Player>, std::allocator<std::shared_ptr<Player>>>*);
    virtual void setTagData(CompoundTag*);
    virtual void getSeed();
    virtual void getXSpawn();
    virtual void getYSpawn();
    virtual void getZSpawn();
    virtual void getXStronghold();
    virtual void getZStronghold();
    virtual void getXStrongholdEndPortal();
    virtual void getZStrongholdEndPortal();
    virtual void getGameTime();
    virtual void getDayTime();
    virtual void getSizeOnDisk();
    virtual void getLoadedPlayerTag();
    virtual void setSeed(long long);
    virtual void setXSpawn(int);
    virtual void setYSpawn(int);
    virtual void setZSpawn(int);
    virtual void setHasStronghold();
    virtual void getHasStronghold();
    virtual void setXStronghold(int);
    virtual void setZStronghold(int);
    virtual void setHasStrongholdEndPortal();
    virtual void getHasStrongholdEndPortal();
    virtual void setXStrongholdEndPortal(int);
    virtual void setZStrongholdEndPortal(int);
    virtual void setGameTime(long long);
    virtual void setDayTime(long long);
    virtual void setSizeOnDisk(long long);
    virtual void setLoadedPlayerTag(CompoundTag*);
    virtual void setSpawn(BlockPos const&);
    virtual void getLevelName();
    virtual void setLevelName(std::wstring const&);
    virtual void getVersion();
    virtual void setVersion(int);
    virtual void getLastPlayed();
    virtual void getClearWeatherTime();
    virtual void setClearWeatherTime(int);
    virtual void isThundering();
    virtual void setThundering(bool);
    virtual void getThunderTime();
    virtual void setThunderTime(int);
    virtual void isRaining();
    virtual void setRaining(bool);
    virtual void getRainTime();
    virtual void setRainTime(int);
    virtual void getGameType();
    virtual void isGenerateMapFeatures();
    virtual void setGenerateMapFeatures(bool);
    virtual void getSpawnBonusChest();
    virtual void setGameType(GameType const*);
    virtual void useNewSeaLevel();
    virtual void getHasBeenInCreative();
    virtual void setHasBeenInCreative(bool);
    virtual void getGeneratorType();
    virtual void setGeneratorType(LevelType*);
    virtual void getGeneratorOptions();
    virtual void setGeneratorOptions(SuperflatConfig*);
    virtual void isHardcore();
    virtual void setHardcore(bool);
    virtual void getAllowCommands();
    virtual void setAllowCommands(bool);
    virtual void isInitialized();
    virtual void setInitialized(bool);
    virtual void getGameRules();
    virtual void getDifficulty();
    virtual void setDifficulty(Difficulty const*);
    virtual void getCloudHeight();
    virtual void setCloudHeight(int);
    virtual void isDifficultyLocked();
    virtual void setDifficultyLocked(bool);
    virtual void getDimensionData(DimensionType const*);
    virtual void setDimensionData(DimensionType const*, CompoundTag*);
    virtual void getXZSize();
    virtual void func_7100212214();
    virtual void func_710021221C();
    virtual void func_7100212238();
    virtual void getHellScale();
    virtual void setModernEnd();
    virtual void getModernEnd();
    virtual void getBiomeScale();
    virtual void getBiomeCentreXChunk();
    virtual void getBiomeCentreZChunk();

    long mSeed;
    LevelType* mLevelType;
    SuperflatConfig* mGeneratorOptions;
    Vec3i mSpawnPos;
    long mGameTime;
    long mDayTime;
    long mLastPlayed;
    long mSizeOnDisk;
    long qword_50;
    std::wstring mLevelName;
    int mVersion;
    int mClearWeatherTime;
    bool mIsRaining;
    int mRainTime;
    bool mIsThundering;
    int mThunderTime;
    GameType* mGameType;
    bool mIsGenerateMapFeatures;
    bool mIsHardcore;
    bool mAllowCommands;
    bool mInited;
    Difficulty* mDifficulty;
    bool mIsDifficultyLocked;
    CompoundTag* mDimensionData;
    void* qword_b0;
    void* qword_b8;
    void* qword_c0;
    float float_c8;
    int field_CC;
    int mCloudHeight;
    bool mUseNewSeaLevel;
    bool mHasBeenInCreativeMode;
    bool mIsSpawnBonusChest;
    int mXZSize;
    int mCurrentXZSize;
    int mCurrentHellScale;
    bool mIsClassicMoat;
    bool mIsSmallMoat;
    bool mIsMediumMoat;
    int mHellScale;
    bool mIsModernEnd;
    int mStrongholdPosX;
    int mStrongholdPosY;
    int mStrongholdPosZ;
    bool mHasStronghold;
    int mStrongholdEndPortalX;
    int mStrongholdEndPortalZ;
    bool mHasStrongholdEndPortal;
    bool mIsBiggerBiomes;
    int mBiomeCenterXChunk;
    int mBiomeCenterZChunk;
    int mGameRules;
};